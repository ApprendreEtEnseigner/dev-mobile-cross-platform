// recuperation des pieces depuis le fichier .json
//! Ces lignes de code sont √©crites en JavaScript et utilisent l'API Fetch pour r√©cup√©rer un fichier JSON, puis √©crire son contenu sur la page HTML.

// *const reponse = await fetch("pieces-auto.json"); envoie une requ√™te √† l'URL sp√©cifi√©e pour r√©cup√©rer le fichier JSON. La r√©ponse est stock√©e dans la constante reponse.La r√©ponse est retourn√©e sous forme de promesse et le mot-cl√© "await" est utilis√© pour attendre la r√©solution de la promesse avant de continuer l'ex√©cution du code. 'https://mega.nz/file/mcIxQSxL#M5OsfyPSeFVp0MijQ5mSqbRdB7dijgfrsCSRudaZHIg'
const reponse = await fetch("pieces-autos.json");

//* const pieces = await reponse.json(); convertit la r√©ponse JSON en un objet JavaScript. Le contenu JSON est extrait de la r√©ponse et stock√© dans la constante pieces.Une fois que la r√©ponse est r√©solue, la m√©thode "json()" est appel√©e sur l'objet r√©ponse, ce qui renvoie une autre promesse qui est r√©solue avec les donn√©es JSON pars√©es. Le mot-cl√© "await" est √† nouveau utilis√© pour attendre la r√©solution de cette promesse.
const pieces = await reponse.json();

// Fonction qui genere toute la page web
function genererPieces(pieces) {}

for (let i = 0; i < pieces.length; i++) {
  //* Enfin, le tableau "pieces" est cr√©√© √† partir des donn√©es JSON r√©cup√©r√©es, et la premi√®re pi√®ce dans le tableau est stock√©e dans la variable "article".
  const article = pieces[i];

  //* R√©cup√©ration de l'√©l√©ment du DOM qui accueillera les fiches
  const sectionFiches = document.querySelector(".fiches");

  //* Cr√©ation d‚Äôune balise d√©di√©e √† une pi√®ce automobile
  const pieceElement = document.createElement("article");

  //! Commen√ßons par choisir nos balises  Le produit est compos√© d‚Äôun nom, d‚Äôun prix, d‚Äôune cat√©gorie et d‚Äôune image. Les balises HTML les plus adapt√©es pour chacunes de ces informations sont :
  //* img  pour l‚Äôimage ;

  //* h2  pour le nom (on consid√®re que h1 servira au titre du document) ;

  //* p  pour le prix et la cat√©gorie.

  //! Une fois les balises choisies, nous allons utiliser la fonction document.createElement pour cr√©er ces quatre √©l√©ments depuis le code JavaScript. La fonction prend un unique argument de type string (cha√Æne de caract√®res) qui sp√©cifie le nom de la balise √† cr√©er. Nous pouvons ainsi cr√©er nos quatre balises en appelant quatre fois cette fonction.

  //* Ce code est √©galement √©crit en JavaScript et utilise l'API DOM (Document Object Model) pour cr√©er un nouvel √©l√©ment "img" (une balise HTML utilis√©e pour afficher une image) en utilisant la m√©thode "createElement()" de l'objet "document".
  const imageElement = document.createElement("img");

  //* Ensuite, la propri√©t√© "src" de l'√©l√©ment image est d√©finie √† l'aide de la valeur de la propri√©t√© "image" de l'objet "article". La propri√©t√© "src" sp√©cifie l'URL de l'image √† afficher.
  //* En r√©sum√©, ce code cr√©e un nouvel √©l√©ment "img" et d√©finit son attribut "src" √† une URL d'image sp√©cifi√©e dans l'objet "article".
  imageElement.src = article.image;
  //! quelle est la difference entre "src" et "image"?
  //* "src" est une propri√©t√© de l'√©l√©ment "img" en HTML qui d√©finit l'URL de la source de l'image √† afficher. En revanche, "image" est une propri√©t√© personnalis√©e d'un objet JavaScript sp√©cifique √† l'application.
  //* Dans le code donn√©, la propri√©t√© personnalis√©e "image" de l'objet "article" est utilis√©e pour r√©cup√©rer l'URL de la source de l'image √† afficher dans l'√©l√©ment "img". La propri√©t√© "src" de l'√©l√©ment "img" est ensuite d√©finie avec cette URL.
  //* En bref, "src" est une propri√©t√© HTML standard qui d√©finit l'URL de la source d'une image, tandis que "image" est une propri√©t√© personnalis√©e sp√©cifique √† l'application JavaScript utilis√©e pour stocker l'URL de la source de l'image.

  const nomElement = document.createElement("h2");
  // !Que fait innerText dans cette ligne de code: nomElement.innerText = article.nom;
  //* innerText est une propri√©t√© de l'objet DOM (Document Object Model) qui permet de modifier ou d'obtenir le texte contenu dans un √©l√©ment HTML. Dans ce cas pr√©cis, la ligne de code affecte la valeur de la propri√©t√© nom de l'objet article √† la propri√©t√© innerText de l'√©l√©ment HTML nomElement. Cela permet d'afficher le nom de l'article dans la page web.
  nomElement.innerText = article.nom;

  const prixElement = document.createElement("p");
  //! Que fait `prix: ${article.prix} ‚Ç¨` dans cette ligne de code: prixElement.innerText = `prix: ${article.prix} ‚Ç¨`;
  //* La syntaxe correcte pour ins√©rer une variable dans une cha√Æne de caract√®res en JavaScript est d'utiliser des backticks () plut√¥t que des guillemets simples ou doubles.

  //* Dans cette ligne de code, la variable article.prix est ins√©r√©e dans la cha√Æne de caract√®res en utilisant la syntaxe ${ }. En utilisant cette syntaxe, la variable article.prix sera √©valu√©e et son contenu sera ins√©r√© dans la cha√Æne de caract√®res.

  //* La ligne de code affectera donc le texte prix: {valeur de article.prix} ‚Ç¨ √† la propri√©t√© innerText de l'√©l√©ment prixElement. Cela permettra d'afficher le prix de l'article dans la page web.
  // V√©rifiez les donn√©es
  //! Vous avez cr√©√© votre premi√®re fiche produit. Bravo ! ü•≥ Mais vous n‚Äôen avez pas encore tout √† fait fini ! Il vous reste deux probl√©matiques √† r√©soudre :
  //! votre client souhaite afficher un indicateur de prix pour aider les consommateurs √† faire leur choix ;

  // //! lorsqu'on affiche la pi√®ce ‚ÄúBalai d'essuie-glace", la cat√©gorie n‚Äôest pas renseign√©e.
  //* Dans notre cas, nous voulons afficher un indicateur √† c√¥t√© du prix pour indiquer au client si l‚Äôarticle est abordable ou non. Si un article vaut moins de 35 euros, alors on consid√®re qu‚Äôil est abordable, et on affichera un seul symbole euro. √Ä l‚Äôinverse, si l‚Äôon consid√®re que le prix est √©lev√©, on affichera trois symboles euro.
  prixElement.innerText = `prix: ${article.prix} ‚Ç¨ (${
    article.prix > 35 ? "‚Ç¨" : "‚Ç¨‚Ç¨‚Ç¨"
  })`;

  const categorieElement = document.createElement("p");
  const descriptionElement = document.createElement("p");
  const stockElement = document.createElement("p");

  //! Fournir une valeur par d√©faut gr√¢ce √† l‚Äôop√©rateur nullish
  //! L‚Äôop√©rateur nullish s‚Äôutilise lorsque vous pensez avoir une information dans une variable mais que finalement, il n‚Äôy en a pas.
  //! Dans notre cas, la pi√®ce automobile ‚ÄúBalai d‚Äôessuie-glace‚Äù n‚Äôappartient √† aucune cat√©gorie. On aimerait le pr√©ciser entre parenth√®ses lorsque c‚Äôest le cas.
  //* L‚Äôop√©rateur s‚Äô√©crit avec deux ?? sous la forme suivante :
  //*      expression √† tester ?? valeur de substitution
  categorieElement.innerText = article.categorie ?? "(aucune categorie)";
  descriptionElement.innerText =
    article.description ?? "Pas de description pour le moment.";
  stockElement.innerText = article.disponibilite
    ? "En stock"
    : "Rupture de stock";

  //* On rattache la balise article a la section Fiches
  sectionFiches.appendChild(pieceElement);

  //* On rattache l‚Äôimage √† pieceElement (la balise article)
  pieceElement.appendChild(imageElement);
  pieceElement.appendChild(nomElement);
  pieceElement.appendChild(prixElement);
  pieceElement.appendChild(categorieElement);
  pieceElement.appendChild(descriptionElement);
  pieceElement.appendChild(stockElement);
}

//* gestion des bouttons
const buttonTrier = document.querySelector(".btn-trier");

buttonTrier.addEventListener("click", function () {
  const piecesOrdonnees = Array.from(pieces);

  piecesOrdonnees.sort(function (a, b) {
    return a.prix - b.prix;
  });
  console.log(piecesOrdonnees);
});

const buttonFiltrer = document.querySelector(".btn-filtrer");

buttonFiltrer.addEventListener("click", function () {
  const piecesFiltrees = pieces.filter(function (piece) {
    return piece.prix <= 35;
  });

  console.log(piecesFiltrees);
});

const buttonDescribe = document.querySelector(".btn-describe");
buttonDescribe.addEventListener("click", function () {
  const piecesFiltrees = pieces.filter(function (piece) {
    return piece.description;
  });

  console.log(piecesFiltrees);
});

const buttonDecroissant = document.querySelector(".btn-decroissant");
buttonDecroissant.addEventListener("click", function () {
  const piecesOrdonnees = Array.from(pieces);
  piecesOrdonnees.sort(function (a, b) {
    return b.prix - a.prix;
  });
  console.log(piecesOrdonnees);
});

const noms = pieces.map((piece) => piece.nom);

for (let i = pieces.length - 1; i >= 0; i--) {
  if (pieces[i].prix > 35) {
    noms.splice(i, 1);
  }
}
console.log(noms);

//Cr√©ation de la liste
const abordableElement = document.createElement("ul");

for (let i = 0; i < noms.length; i++) {
  const nomElement = document.createElement("li");
  nomElement.innerText = noms[i];
  abordableElement.appendChild(nomElement);
}

document.querySelector(".abordables").appendChild(abordableElement);

//  disponibilite des pieces
const disponibilitePieces = pieces.map((piece) =>
  piece.disponibilite == true ? `${piece.nom} - ${piece.prix} ‚Ç¨ ` : ""
);
// suppression des "" dans la liste
for (let i = disponibilitePieces.length - 1; i >= 0; i--) {
  if (disponibilitePieces[i] == "") {
    disponibilitePieces.splice(i, 1);
  }
}
console.log(disponibilitePieces);

// creation de la liste dispobile
const elementDispo = document.createElement("ul");

for (let i = 0; i < disponibilitePieces.length; i++) {
  if (disponibilitePieces != "") {
    const isTrueElement = document.createElement("li");
    isTrueElement.innerText = disponibilitePieces[i];
    elementDispo.appendChild(isTrueElement);
  }
}

// ajout de la liste ul des element dispo dans le div disponible
document.querySelector(".disponibles").appendChild(elementDispo);
